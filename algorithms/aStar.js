import{printPath as t,sleep as e}from"../grid.js";import{displayFCost as g,explore as o,clearGrid as s,displayNoPath as n,displayOpened as l,speed as i,timeDiff as r,toggleButtons as a}from"../board.js";var debugMsg=0,allowDiag=0;export async function aStar(a,f){s(),debugMsg&&console.log("----------Entering aStar function----------"),allowDiag=f;let u=a.start,d=a.end,h,b=[],$=new Date,p=0;for(b.push(u);b.length>0;){debugMsg&&a.toString(),h=getLowestFCost(b);let c=b.indexOf(h);if(c>-1&&b.splice(c,1),h.closed=!0,await e(i),o(h.x,h.y),h==d){debugMsg&&console.log("Path has been found");let w=r($);t(h,"A*&nbsp",p,w);return}let M=a.getNeighbours(h,0);for(let x=0;x<M.length;x++){let m=M[x];if(m.isWall||m.closed)continue;let y=h.g+1,C=m.visited;(!C||y<m.g)&&(m.visited=!0,m.parent=h,m.h=a.getHCost(m),m.g=y,m.f=m.g+m.h,!C&&(b.push(m),p++),m!=d&&(g(m.x,m.y,m.f,m.g,m.h),l(m.x,m.y)))}}debugMsg&&console.log("No path found"),n()}function getLowestFCost(t){let e=t[0];for(let g=0;g<t.length;g++)(t[g].f<e.f||t[g].f===e.f&&t[g].h<e.h)&&(e=t[g]);return debugMsg&&console.log(`Lowest F Cost: ${e.toString(1)}`),e}