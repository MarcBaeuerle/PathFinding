import{createPath as t,addConsole as e}from"./board.js";var debugMsg=0,allowDiag=0;export class Grid{constructor(t,e){this.grid=[],debugMsg&&console.log("debug messages enabled");for(let s=0;s<t.length;s++){let i=[];for(let r=0;r<t[s].length;r++){let h=new GridNode(r,s,t[s][r]);i.push(h),2==t[s][r]?this.start=h:3==t[s][r]&&(this.end=h)}this.grid.push(i)}debugMsg&&console.log(this.start.toString(1))}toString(){for(let t=0;t<this.grid.length;t++){let e="";for(let s=0;s<this.grid[t].length;s++)e+=this.grid[t][s].toString(0)+""}}getNeighbours(t,e){let s=[],i=t.x,r=t.y,h=this.grid;if(e)for(let l=-1;l<=1;l++)for(let g=-1;g<=1;g++)h[r+l]&&h[r+l][i+g]&&!(0==l&&0==g)&&s.push(h[r+l][i+g]);else h[r-1]&&h[r-1][i]&&s.push(h[r-1][i]),h[r][i+1]&&s.push(h[r][i+1]),h[r+1]&&h[r+1][i]&&s.push(h[r+1][i]),h[r][i-1]&&s.push(h[r][i-1]);if(debugMsg){let o="Neighbours: ";for(let n=0;n<s.length;n++)o+=s[n].toString(1);console.log(o)}return s}getHCost(t){let e;return Math.abs(this.end.x-t.x)+Math.abs(this.end.y-t.y)}}class GridNode{constructor(t,e,s){this.x=t,this.y=e,1==s?(this.isWall=!0,this.weight=0):(this.isWall=!1,this.weight=1),this.f=0,this.h=0,this.g=0,this.visited=!1,this.closed=!1,this.parent=null,debugMsg&&console.log("New GridNode Created")}toString(t){let e="",s=[this.visited,this.isWall,this.closed];t&&(e=`(${this.x},${this.y}),`);for(let i=0;i<s.length;i++)s[i]?e+="t,":e+="f,";return"["+(e+=`${this.f.toFixed(1)},${this.weight.toFixed(1)}]`)}}export function printPath(s,i,r,h){let l=s,g=[];for(g.push(l);null!=l.parent;)g.push(l.parent),l=l.parent;return e(i,r,h,g.length),t(g),g}export async function sleep(t){return new Promise(e=>setTimeout(e,1e3*t))}